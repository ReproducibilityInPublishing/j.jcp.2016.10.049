--- Assets ---

Figures [47] 3: 5+5+2+5+1+5 4: 3+5 5: 8 6: 3+5
Tables [20] 1: 2*10
Numbers [0]
Total [67]

Total Score: [134]

--- Log ---

00:00:00: Start Asset count
F3: (0*5)+(0*5)+(0*2)+(0*5)+(0*1)+(0*5)
F4: (0*3)+(0*5)
F5: (0*8)
F6: (0*3)+(0*5)
T1: (0*20)
Total: [0(0%)]@00:00:00

00:06:15: Asset count finished
00:33:00: I seem to be getting correct values for the upper left plot of Figure 3. I now need to automate this procedure a little bit and produce the plots as well.

F3: (2+0*4)+(0*5)+(0*2)+(0*5)+(0*1)+(0*5)
F4: (0*3)+(0*5)
F5: (0*8)
F6: (0*3)+(0*5)
T1: (0*20)
Total: [2(1.5%)]@00:33:00

01:00:00: Started process of adding arguments to programs
01:56:00: Poiseuille nonconvex program now has arguments, need to script it. I also adjusted the output so it could be run several times in succession and create a .csv file.
02:33:00: Building a script to use gnu parallel to execute all the experiments in a parallelized fashion
03:39:00: Finished building script, it takes quite a while. maybe 12 hours with 4 threads? I'll need to time it. I've now finished the nonconvex plots in Figure 3. They all seem to match exactly.

F3: (2*5)+(0*5)+(2*2)+(0*5)+(2*1)+(0*5)
F4: (0*3)+(0*5)
F5: (0*8)
F6: (0*3)+(0*5)
T1: (0*20)
Total: [16(11.9%)]@03:39:00

06:13:00: Trying to fix the taylor vortex problem, but I've run into a nan issue. I'm assuming for now that there is a change I made somewhere which resulted in this nan, but I need to study and fix the issue.
07:14:00: I've found that the solution is becoming singular... I'll have to think about how to solve this.
08:01:00: The jobs for Figure3 convex equation finished. They took nearly 2 days to finish running. I've now perfectly replicated Figure 3.

F3: (2*5)+(2*5)+(2*2)+(2*5)+(2*1)+(2*5)
F4: (0*3)+(0*5)
F5: (0*8)
F6: (0*3)+(0*5)
T1: (0*20)
Total: [46(34.3%)]@08:01:00

08:06:00: The Couette flow example is also plagued by nan and inf issues. Its possible that this is related to the stability of the problem. I'm double checking the set parameters to make sure everything is set properly.
08:10:00: I've started reading the article in depth to understand how to properly debug the inf/nan issues I'm seeing with the second two examples.
08:48:00: I may have discovered an error in the Couette example. s_q seems to be defined incorrectly, however the correct definition is just commented out above. Maybe some experimentation by the author?
08:54:00: This isn't the only problem because I'm still getting nan problems. Also when I reduce the lattice size to 11, the program segfaults.
09:31:00: The mysterious variable 'ell' is likely ellipticity of the domain.
09:34:00: It seems while the taylor green vortex appears to only concern the circular region dicussed in the paper, wikipedia says it's solved in a square domain. It's possible the error summation is only over the circular region.
10:45:00: In order to gain insight into the program I've embarked on an effort to translate some mojibaked comments in the source code. Working with my officemate we discovered that the encoding was probably 'utf-16-be'. Using the bvi hex editor I managed to extract the bytes for the mojibaked text. Then using python, I was able to load those bytes from a file, and decode them with the correct encoding. The function definition is this essentially:

def fix_mojibake(filepath, encoding='utf-16-be'):
	with open(filepath, "rb") as thefile:
		data = thefile.read()
	print(data.decode(encoding))

The correctly encoded text is a mixture of korean and chinese characters, mostly korean. I put the text into google translate which correctly identified the language, but didn't give me any translation. I've sent this text to a family friend of mine who knows korean and has phd training in physics. She will be able to tell if 1) It's gibberish indicating the encoding is still incorrect, or 2) It's technical language which google isn't able to understand. in which case she'll be able to provide a translation of these comments.
10:57:00: It's been suggested that we send code snippets to the original authors and request translations. I'm compiling a document with the comments.
11:52:00: Email sent
11:52:00: The authors replied rapidly and didn't ask any questions at all. Perhaps they would be interested in releasing their code publicly?
12:12:00: I've integrated changes and some translated comments from what they sent. The code no longer produces the nan values and I think I've figured out where the issue originated from. The s_q had the wrong sign it seems. This is the case for the taylor vortex
13:16:00: I've now done some work transforming the Vortex non convex code.
13:21:00: The Vortex non convex code still has nan problems.
14:26:00: After struggling for a while, I found some versions of the original code which were translated initially by one of ourgroup members. They all seem to run, so I'm going to try to add the appropriate command line options as before. I'll add them alongside the original files first, then get rid of the non-working files.
16:17:00: Close inspection of the code I received, verifying compilation and running at each stage, it seems that changing the vortex code to s_v = 8*(2+s_q)/(8+s_q) causes the nan issue. I'm not sure why its doing this. I'm going to send an email to the authors asking.
16:29:00: I tried increasing the precision level to quad, however that didn't work.
16:29:00: The authors have gotten back to me, They claim they also can't get the solution to work for tau=3.0. They think they forgot to switch the scheme back to their scheme from testing the BGK scheme. (Apparently BGK scheme is when s_nu = s_q) They say this shows one case where BGK is more stable.
18:11:00: I've now completed Figure 4 minus the tau=3.0 line and also minus the point at Ny=139 for tau=2.0. For some reason that particular experiment was throwing nan as well.

F3: (2*5)+(2*5)+(2*2)+(2*5)+(2*1)+(2*5)
F4: (2*2+0*1)+(2*4+1*1)
F5: (0*8)
F6: (0*3)+(0*5)
T1: (0*20)
Total: [59(44.0%)]@18:11:00

19:13:00: In the Couette problem, there are actually two error variables, error and E_r. It seems at least at the end of the problem, error = 0, while E_r does not. I will assume that E_r is the value we want for error.
19:41:00: It turns out that the dx/h definition in the third problem is with respect to the radius in the paper and the whole domain in the code. This means I need to double the listed resolution values to get the listed h values in the article. I've redefined these resolution values and am re-running the simulations. I've also added the ability for the script to accept a job number
19:55:00: Figure 6 is as complete as its going to get. Here, we've got mostly the same plot except for the convex method, the tau=0.505 is lower than tau=0.6 which is opposite of what the article shows. I'll rate the tau=0.505 line at a 1 for that. Additionally, the nonconvex lines are getting many -nan values. This has eliminated the tau=3 line, and removed data points from both the tau=1 and tau=2 lines. I'll rate both of those as 1.

F3: (2*5)+(2*5)+(2*2)+(2*5)+(2*1)+(2*5)
F4: (2*2+0*1)+(2*4+1*1)
F5: (0*8)
F6: (1*2+0*1)+(2*4+1*1)
T1: (0*20)
Total: [70(52.2%)]@19:55:00

20:41:00: Started a plotting script for Figure 5. I did the simplest thing first which was to plot the analytic solutions which are in the plot. These match perfectly.

F3: (2*5)+(2*5)+(2*2)+(2*5)+(2*1)+(2*5)
F4: (2*2+0*1)+(2*4+1*1)
F5: (2*4+0*4)
F6: (1*2+0*1)+(2*4+1*1)
T1: (0*20)
Total: [78(58.2%)]@20:41:00

21:19:00: I found another error. Apparently, the legend in Figure 5 is reversed. the red circles should be beta = 0.1, and the pink circles should be beta = 0.8.
21:39:00: Figure 5 is now complete!

F3: (2*5)+(2*5)+(2*2)+(2*5)+(2*1)+(2*5)
F4: (2*2+0*1)+(2*4+1*1)
F5: (2*8)
F6: (1*2+0*1)+(2*4+1*1)
T1: (0*20)
Total: [86(64.2%)]@21:39:00

21:40:00: I discovered my Figure 6 script was actually using the Taylor Green code. I'm going to re-run it now while I start on Table 1.
22:25:00: I sent another email to the author trying to figure out how the stability code for Table 1 was run.
22:31:00: I'm going to add a license file and see whether I can get this repo running in travis
23:28:00: I've completed adding a 10 minute cutoff to the stability codes and also wrote a couple of infrastructure scripts to manage running all the experiments. One issue which I will need to manage is the length of time necessary to run all of these simulations. It may not be feasible to run them all on my local machine, and we may need to run them on a computing cluster using a job management system.
23:28:00: Early results from this experiment show that tau values like 0.5088 converge. This means the authors likely didn't actually run down to the ten-thousandths precision. I'm going to edit the script to first run 0.5001 then every thousandths from 0.501 to 3.0. This should be significantly faster.

-- reset timer ---
01:23:00: Completed script to produce table 1 data from results of the RunTable1Simulations.sh script.
01:23:00: Most of the experiments have now completed after running the problem overnight. There are still two major experiment categories left to run and I'm waiting for them to finish. After the evening they should be finished as well. In total, it will take the Table 1 simulations about 2 days of running time to complete

F3: (2*5)+(2*5)+(2*2)+(2*5)+(2*1)+(2*5)
F4: (2*2+0*1)+(2*4+1*1)
F5: (2*8)
F6: (1*2+0*1)+(2*4+1*1)
T1: (12*2+6*1+2*0)
Total: [116(86.6%)]@24:51:00

01:26:00: Experiments have now completed. The computations took about 2 days of 8 threaded running to finish.

F3: (2*5)+(2*5)+(2*2)+(2*5)+(2*1)+(2*5)
F4: (2*2+0*1)+(2*4+1*1)
F5: (2*8)
F6: (1*2+0*1)+(2*4+1*1)
T1: (12*2+8*1)
Total: [118(88.1%)]@24:54:00
